// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewRecipe extends ethereum.Event {
  get params(): NewRecipe__Params {
    return new NewRecipe__Params(this);
  }
}

export class NewRecipe__Params {
  _event: NewRecipe;

  constructor(event: NewRecipe) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get displayName(): string {
    return this._event.parameters[2].value.toString();
  }

  get imageUrl(): string {
    return this._event.parameters[3].value.toString();
  }

  get ingredients(): Array<string> {
    return this._event.parameters[4].value.toStringArray();
  }

  get steps(): Array<string> {
    return this._event.parameters[5].value.toStringArray();
  }
}

export class UpdatedRecipe extends ethereum.Event {
  get params(): UpdatedRecipe__Params {
    return new UpdatedRecipe__Params(this);
  }
}

export class UpdatedRecipe__Params {
  _event: UpdatedRecipe;

  constructor(event: UpdatedRecipe) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get displayName(): string {
    return this._event.parameters[2].value.toString();
  }

  get imageUrl(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class Recipe__recipesResult {
  value0: Address;
  value1: string;
  value2: string;

  constructor(value0: Address, value1: string, value2: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    return map;
  }
}

export class Recipe__getRecipeResult {
  value0: string;
  value1: string;

  constructor(value0: string, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }
}

export class Recipe extends ethereum.SmartContract {
  static bind(address: Address): Recipe {
    return new Recipe("Recipe", address);
  }

  ownerToRecipe(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "ownerToRecipe",
      "ownerToRecipe(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_ownerToRecipe(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownerToRecipe",
      "ownerToRecipe(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  recipes(param0: BigInt): Recipe__recipesResult {
    let result = super.call(
      "recipes",
      "recipes(uint256):(address,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Recipe__recipesResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString()
    );
  }

  try_recipes(param0: BigInt): ethereum.CallResult<Recipe__recipesResult> {
    let result = super.tryCall(
      "recipes",
      "recipes(uint256):(address,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Recipe__recipesResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString()
      )
    );
  }

  recipeToOwner(param0: BigInt): Address {
    let result = super.call(
      "recipeToOwner",
      "recipeToOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_recipeToOwner(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "recipeToOwner",
      "recipeToOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRecipeIds(): Array<BigInt> {
    let result = super.call("getRecipeIds", "getRecipeIds():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_getRecipeIds(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getRecipeIds",
      "getRecipeIds():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getRecipe(id: BigInt): Recipe__getRecipeResult {
    let result = super.call("getRecipe", "getRecipe(uint256):(string,string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return new Recipe__getRecipeResult(
      result[0].toString(),
      result[1].toString()
    );
  }

  try_getRecipe(id: BigInt): ethereum.CallResult<Recipe__getRecipeResult> {
    let result = super.tryCall(
      "getRecipe",
      "getRecipe(uint256):(string,string)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Recipe__getRecipeResult(value[0].toString(), value[1].toString())
    );
  }
}

export class CreateRecipeCall extends ethereum.Call {
  get inputs(): CreateRecipeCall__Inputs {
    return new CreateRecipeCall__Inputs(this);
  }

  get outputs(): CreateRecipeCall__Outputs {
    return new CreateRecipeCall__Outputs(this);
  }
}

export class CreateRecipeCall__Inputs {
  _call: CreateRecipeCall;

  constructor(call: CreateRecipeCall) {
    this._call = call;
  }

  get _displayName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _imageUrl(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _ingredients(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get _steps(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }
}

export class CreateRecipeCall__Outputs {
  _call: CreateRecipeCall;

  constructor(call: CreateRecipeCall) {
    this._call = call;
  }
}

export class UpdateRecipeNameCall extends ethereum.Call {
  get inputs(): UpdateRecipeNameCall__Inputs {
    return new UpdateRecipeNameCall__Inputs(this);
  }

  get outputs(): UpdateRecipeNameCall__Outputs {
    return new UpdateRecipeNameCall__Outputs(this);
  }
}

export class UpdateRecipeNameCall__Inputs {
  _call: UpdateRecipeNameCall;

  constructor(call: UpdateRecipeNameCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _displayName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateRecipeNameCall__Outputs {
  _call: UpdateRecipeNameCall;

  constructor(call: UpdateRecipeNameCall) {
    this._call = call;
  }
}

export class UpdateRecipeImageCall extends ethereum.Call {
  get inputs(): UpdateRecipeImageCall__Inputs {
    return new UpdateRecipeImageCall__Inputs(this);
  }

  get outputs(): UpdateRecipeImageCall__Outputs {
    return new UpdateRecipeImageCall__Outputs(this);
  }
}

export class UpdateRecipeImageCall__Inputs {
  _call: UpdateRecipeImageCall;

  constructor(call: UpdateRecipeImageCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _imageUrl(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateRecipeImageCall__Outputs {
  _call: UpdateRecipeImageCall;

  constructor(call: UpdateRecipeImageCall) {
    this._call = call;
  }
}
